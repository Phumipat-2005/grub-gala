import { useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Minus, Plus, ShoppingCart, ArrowLeft } from "lucide-react";
import { useToast } from "@/hooks/use-toast";

interface MenuItem {
  id: string;
  name: string;
  price: number;
  description: string;
  image: string;
  category: string;
}

interface CartItem extends MenuItem {
  quantity: number;
}

const menuData: Record<string, MenuItem[]> = {
  "thai-cuisine": [
    {
      id: "tom-yum",
      name: "‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á",
      price: 120,
      description: "‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏£‡∏™‡∏à‡∏±‡∏î‡∏à‡πâ‡∏≤‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏∏‡πâ‡∏á‡∏™‡∏î",
      image: "üç§",
      category: "‡πÅ‡∏Å‡∏á"
    },
    {
      id: "pad-thai",
      name: "‡∏ú‡∏±‡∏î‡πÑ‡∏ó‡∏¢",
      price: 80,
      description: "‡∏ú‡∏±‡∏î‡πÑ‡∏ó‡∏¢‡∏Å‡∏∏‡πâ‡∏á‡∏™‡∏î‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥‡∏ï‡πâ‡∏ô‡∏ï‡∏≥‡∏£‡∏±‡∏ö",
      image: "üçù",
      category: "‡∏ú‡∏±‡∏î"
    },
    {
      id: "som-tam",
      name: "‡∏™‡πâ‡∏°‡∏ï‡∏≥",
      price: 60,
      description: "‡∏™‡πâ‡∏°‡∏ï‡∏≥‡πÑ‡∏ó‡∏¢‡∏£‡∏™‡∏à‡∏±‡∏î‡∏à‡πâ‡∏≤‡∏ô",
      image: "ü•ó",
      category: "‡∏¢‡∏≥"
    },
    {
      id: "khao-pad",
      name: "‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡∏Å‡∏∏‡πâ‡∏á",
      price: 90,
      description: "‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡∏Å‡∏∏‡πâ‡∏á‡∏™‡∏î‡∏´‡∏≠‡∏°‡∏Å‡∏£‡∏∏‡πà‡∏ô",
      image: "üçö",
      category: "‡∏ú‡∏±‡∏î"
    }
  ],
  "japanese-house": [
    {
      id: "sushi-set",
      name: "‡∏ã‡∏π‡∏ä‡∏¥‡πÄ‡∏ã‡πá‡∏ï",
      price: 280,
      description: "‡∏ã‡∏π‡∏ä‡∏¥‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏•‡∏≤‡∏î‡∏¥‡∏ö‡∏™‡∏î‡πÉ‡∏´‡∏°‡πà 8 ‡∏ä‡∏¥‡πâ‡∏ô",
      image: "üç£",
      category: "‡∏ã‡∏π‡∏ä‡∏¥"
    },
    {
      id: "ramen",
      name: "‡∏£‡∏≤‡πÄ‡∏°‡∏ô‡πÇ‡∏ä‡∏¢‡∏∏",
      price: 180,
      description: "‡∏£‡∏≤‡πÄ‡∏°‡∏ô‡∏ô‡πâ‡∏≥‡πÉ‡∏™‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡πâ‡∏ô",
      image: "üçú",
      category: "‡∏£‡∏≤‡πÄ‡∏°‡∏ô"
    },
    {
      id: "tempura",
      name: "‡πÄ‡∏ó‡∏°‡∏õ‡∏∏‡∏£‡∏∞‡∏ä‡∏∏‡∏î",
      price: 200,
      description: "‡πÄ‡∏ó‡∏°‡∏õ‡∏∏‡∏£‡∏∞‡∏Å‡∏∏‡πâ‡∏á‡πÅ‡∏•‡∏∞‡∏ú‡∏±‡∏Å‡∏ó‡∏≠‡∏î‡∏Å‡∏£‡∏≠‡∏ö",
      image: "üç§",
      category: "‡∏ó‡∏≠‡∏î"
    }
  ],
  "isaan-paradise": [
    {
      id: "som-tam-isaan",
      name: "‡∏™‡πâ‡∏°‡∏ï‡∏≥‡∏õ‡∏π‡∏õ‡∏•‡∏≤‡∏£‡πâ‡∏≤",
      price: 80,
      description: "‡∏™‡πâ‡∏°‡∏ï‡∏≥‡∏£‡∏™‡πÅ‡∏ã‡πà‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏π‡∏õ‡∏•‡∏≤‡∏£‡πâ‡∏≤",
      image: "ü¶Ä",
      category: "‡∏¢‡∏≥"
    },
    {
      id: "larb",
      name: "‡∏•‡∏≤‡∏ö‡∏´‡∏°‡∏π",
      price: 90,
      description: "‡∏•‡∏≤‡∏ö‡∏´‡∏°‡∏π‡∏™‡∏±‡∏ö‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥‡∏à‡∏±‡∏î‡∏à‡πâ‡∏≤‡∏ô",
      image: "ü•©",
      category: "‡∏•‡∏≤‡∏ö"
    },
    {
      id: "grilled-chicken",
      name: "‡πÑ‡∏Å‡πà‡∏¢‡πà‡∏≤‡∏á",
      price: 150,
      description: "‡πÑ‡∏Å‡πà‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏®‡∏´‡∏≠‡∏°‡∏Å‡∏£‡∏∏‡πà‡∏ô",
      image: "üçó",
      category: "‡∏¢‡πà‡∏≤‡∏á"
    }
  ]
};

const restaurantNames: Record<string, string> = {
  "thai-cuisine": "‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡πÅ‡∏ó‡πâ",
  "japanese-house": "Japanese House",
  "isaan-paradise": "‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡πå‡∏≠‡∏µ‡∏™‡∏≤‡∏ô"
};

const Menu = () => {
  const { restaurantId } = useParams<{ restaurantId: string }>();
  const navigate = useNavigate();
  const { toast } = useToast();
  const [cart, setCart] = useState<CartItem[]>([]);

  const menu = restaurantId ? menuData[restaurantId] || [] : [];
  const restaurantName = restaurantId ? restaurantNames[restaurantId] || "‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£" : "‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£";

  const addToCart = (item: MenuItem) => {
    setCart(prevCart => {
      const existingItem = prevCart.find(cartItem => cartItem.id === item.id);
      if (existingItem) {
        return prevCart.map(cartItem =>
          cartItem.id === item.id
            ? { ...cartItem, quantity: cartItem.quantity + 1 }
            : cartItem
        );
      } else {
        return [...prevCart, { ...item, quantity: 1 }];
      }
    });
    
    toast({
      title: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß",
      description: `‡πÄ‡∏û‡∏¥‡πà‡∏° ${item.name} ‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`,
    });
  };

  const updateQuantity = (itemId: string, change: number) => {
    setCart(prevCart => {
      return prevCart.map(item => {
        if (item.id === itemId) {
          const newQuantity = item.quantity + change;
          return newQuantity > 0 ? { ...item, quantity: newQuantity } : item;
        }
        return item;
      }).filter(item => item.quantity > 0);
    });
  };

  const getTotalPrice = () => {
    return cart.reduce((total, item) => total + (item.price * item.quantity), 0);
  };

  const getItemQuantity = (itemId: string) => {
    const item = cart.find(cartItem => cartItem.id === itemId);
    return item ? item.quantity : 0;
  };

  const proceedToCheckout = () => {
    if (cart.length === 0) {
      toast({
        title: "‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á",
        description: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠",
        variant: "destructive"
      });
      return;
    }
    navigate("/checkout", { state: { cart, restaurantName } });
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-background to-muted p-4">
      <div className="max-w-6xl mx-auto">
        <div className="flex items-center justify-between mb-8">
          <div className="flex items-center space-x-4">
            <Button 
              variant="outline" 
              size="icon"
              onClick={() => navigate("/restaurants")}
            >
              <ArrowLeft className="w-4 h-4" />
            </Button>
            <div>
              <h1 className="text-4xl font-bold text-primary">{restaurantName}</h1>
              <p className="text-muted-foreground">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£</p>
            </div>
          </div>
          
          {cart.length > 0 && (
            <div className="bg-card p-4 rounded-lg shadow-elegant">
              <div className="flex items-center space-x-2 mb-2">
                <ShoppingCart className="w-5 h-5 text-primary" />
                <span className="font-semibold">‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ ({cart.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)</span>
              </div>
              <div className="text-2xl font-bold text-primary">
                ‡∏ø{getTotalPrice().toLocaleString()}
              </div>
              <Button 
                variant="order" 
                size="sm" 
                className="w-full mt-2"
                onClick={proceedToCheckout}
              >
                ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
              </Button>
            </div>
          )}
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {menu.map((item) => {
            const quantity = getItemQuantity(item.id);
            return (
              <Card key={item.id} className="hover:shadow-elegant transition-all duration-300">
                <CardHeader className="text-center">
                  <div className="text-5xl mb-2">{item.image}</div>
                  <CardTitle className="text-lg text-primary">{item.name}</CardTitle>
                  <CardDescription>{item.description}</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="flex justify-between items-center">
                    <Badge variant="outline">{item.category}</Badge>
                    <span className="text-xl font-bold text-primary">‡∏ø{item.price}</span>
                  </div>
                  
                  {quantity === 0 ? (
                    <Button 
                      variant="restaurant" 
                      className="w-full" 
                      onClick={() => addToCart(item)}
                    >
                      ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
                    </Button>
                  ) : (
                    <div className="flex items-center justify-center space-x-4">
                      <Button 
                        variant="outline" 
                        size="icon"
                        onClick={() => updateQuantity(item.id, -1)}
                      >
                        <Minus className="w-4 h-4" />
                      </Button>
                      <span className="text-xl font-semibold min-w-[2ch] text-center">
                        {quantity}
                      </span>
                      <Button 
                        variant="outline" 
                        size="icon"
                        onClick={() => updateQuantity(item.id, 1)}
                      >
                        <Plus className="w-4 h-4" />
                      </Button>
                    </div>
                  )}
                </CardContent>
              </Card>
            );
          })}
        </div>
      </div>
    </div>
  );
};

export default Menu;